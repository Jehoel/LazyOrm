<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

const String connectionString = @"Server=server.in.dai.me;Database=Northwind;Trusted_Connection=True;";
const String queriesPath      = @"C:\Git\me\LazyOrm\LazyOrm\TestQueries";

SqlConnection con = new SqlConnection( connectionString );
con.Open();

System.Diagnostics.Stopwatch sw = System.Diagnostics.Stopwatch.StartNew();

List<Table> tables = GetAllTables( con ).ToList();
List<Query> queries = GetAllQueries( con, new DirectoryInfo( queriesPath ) );

sw.Stop();

databaseClassName = "NorthwindDatabase";

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;

namespace MyNamespace
{
	public sealed partial class <#= databaseClassName #> : IDisposable
	{
		// Generatd <#= DateTime.UtcNow.ToString("o") #> UTC
		// Query time: <#= sw.ElapsedMilliseconds.ToString("N0") #>ms

		private readonly SqlConnection c;

		private <#= databaseClassName #>(SqlConnection c)
		{
			this.c = c;
		}

		public void Dispose()
		{
			this.c.Dispose();
		}

		public static async Task<<#= databaseClassName #>> CreateAsync(String connectionString)
		{
			SqlConnection con = new SqlConnection( connectionString );
			try
			{
				await con.OpenAsync().ConfigureAwait(false);
				return new <#= databaseClassName #>( con );
			}
			catch
			{
				con.Dispose();
				throw;
			}
		}

<#	foreach( Table table in tables.Where( t => !t.IsView ) ) { #>
	#region Table: [<#= table.Name #>]

		public Task<Int32> Insert<#= table.CSName #>Async( <#= table.CSName #> entity )
		{
			return this.Insert<#= table.CSName #>Async
			(
<#		foreach( Column c in table.Columns.Where( c => !c.IsIdentity ) ) { #>
				entity.<#= c.Name #><#= c.IsLast ? "" : "," #>
<#		} #>
			);
		}

		public async Task<Int32> Insert<#= table.CSName #>Async( <#= String.Join( ", ", table.Columns.Where( c => !c.IsIdentity ).Select( c => c.CSType + " " + c.LocalName ) ) #> )
		{
			using( SqlCommand cmd = this.c.CreateCommand() )
			{
				cmd.CommandText =
@"
INSERT INTO <#= table.Schema #>.<#= table.Name #> (
	<#= String.Join( ", ", table.Columns.Where( c => !c.IsIdentity ).Select( c => '[' + c.Name + ']' ) ) #>
) VALUES (
	<#= String.Join( ", ", table.Columns.Where( c => !c.IsIdentity ).Select( c => '@' + c.LocalName + ' ' ) ) #>
)
";				
				
<#		foreach( Column c in table.Columns.Where( c => !c.IsIdentity ) ) { #>
<#			if( c.IsNullable ) { #>
				cmd.Parameters.Add( <#= ( "@\"" + c.LocalName + "\"" ).PadRight( c.LongestName + 3 ) #>, SqlDbType.<#= c.SqlType.ToString().PadRight( 8 ) #> ).Value = ( <#= c.LocalNamePad #> == null ) ? DBNull.Value : (Object)<#= c.LocalName #><#= c.IsCSNullable ? ".Value" : "" #>;
<#			} else { #>
				cmd.Parameters.Add( <#= ( "@\"" + c.LocalName + "\"" ).PadRight( c.LongestName + 3 ) #>, SqlDbType.<#= c.SqlType.ToString().PadRight( 8 ) #> ).Value = <#= c.LocalNamePad #>;
<#			} #>
<#		} #>

				return await cmd.ExecuteNonQueryAsync().ConfigureAwait(false);

			}
		}

		public async Task<Int32> Update<#= table.CSName #>Async(Mutable<#= table.CSName #> entity, Mutable<#= table.CSName #> whereEquals)
		{
			if( entity == null ) throw new ArgumentNullException(nameof(entity));
			if( whereEquals == null ) throw new ArgumentNullException(nameof(whereEquals));

			using( SqlCommand cmd = this.c.CreateCommand() )
			{
				StringBuilder sb = new StringBuilder(
@"UPDATE
	<#= table.Schema #>.<#= table.Name #>
SET
");
				Int32 setColumnsCount = 0;
<#		foreach( Column c in table.Columns.Where( col => !col.IsPrimaryKey ) ) { #>
				if( entity.<#= c.Name #>IsSet )
					AddSqlUpdateSet( sb, cmd, ref setColumnsCount, "<#= c.Name #>", "@<#= c.LocalName #>", SqlDbType.<#= c.SqlDbType #>, entity.<#= c.Name #> );

<#		} #>

				if( setColumnsCount == 0 ) throw new ArgumentException( "No entity properties are set." ); 
				
				sb.Append( "WHERE\r\n" );

				Int32 whereColumnsCount = AddWhereClause( sb, cmd, whereEquals );
				if( whereColumnsCount == 0 ) throw new ArgumentException( "No columns used in WHERE." );

				cmd.CommandText = sb.ToString();

				Int32 rows = await cmd.ExecuteNonQueryAsync().ConfigureAwait(false);
				return rows;
			}
		}

		public async Task<List<<#= table.CSName #>>> Query<#= table.CSName #>Async(Mutable<#= table.CSName #> whereEquals)
		{
			//if( whereEquals == null ) throw new ArgumentNullException(nameof(whereEquals));

			const String selectSql =
@"SELECT
<#		foreach( Column c in table.Columns ) { #>
	<#= c.Name #><#= c.IsLast ? "" : "," #>
<#		} #>
FROM
	<#= table.Schema #>.<#= table.Name #>
";

			using( SqlCommand cmd = this.c.CreateCommand() )
			{
				StringBuilder sb = new StringBuilder( selectSql );

				if( whereEquals != null )
				{
					sb.Append( "WHERE\r\n" );

					Int32 whereColumnsCount = AddWhereClause( sb, cmd, whereEquals );
					if( whereColumnsCount == 0 ) throw new ArgumentException( "No columns used in WHERE." );
				}

				cmd.CommandText = sb.ToString();

				using( SqlDataReader rdr = await cmd.ExecuteReaderAsync().ConfigureAwait(false) )
				{
					List<<#= table.CSName #>> list = new List<<#= table.CSName #>>();

					while( await rdr.ReadAsync().ConfigureAwait(false) )
					{
						<#= table.CSName #> row = Create<#= table.CSName #>Entity( rdr );
						list.Add( row );
					}

					return list;
				}
			}
		}

		private static Int32 AddWhereClause( StringBuilder sb, SqlCommand cmd, Mutable<#= table.CSName #> whereEquals )
		{
			Int32 c = 0;
<#		foreach( Column c in table.Columns ) { #>
			if( whereEquals.<#= c.Name #>IsSet )
				AddSqlUpdateWhereAnd( sb, cmd, ref c, "<#= c.Name #>", "@where_<#= c.LocalName #>", SqlDbType.<#= c.SqlDbType #>, whereEquals.<#= c.Name #> );

<#		} #>
			return c;
		}

	#endregion

<#	} #>

		private static void AddSqlUpdateSet( StringBuilder sb, SqlCommand cmd, ref Int32 index, String columnName, String variableName, SqlDbType dbType, Object value )
		{
			if( index > 0 )
			{
				sb.Append( ",\r\n" );
			}

			sb.AppendFormat( "	[{0}] = {1}", columnName, variableName );

			cmd.Parameters.Add( variableName, dbType ).Value = value ?? DBNull.Value;

			index++;
		}

		private static void AddSqlUpdateWhereAnd( StringBuilder sb, SqlCommand cmd, ref Int32 index, String columnName, String variableName, SqlDbType dbType, Object value )
		{
			if( index > 0 )
			{
				sb.Append( "\r\n\tAND\r\n" );
			}

			sb.AppendFormat( "	[{0}] = {1}", columnName, variableName );

			cmd.Parameters.Add( variableName, dbType ).Value = value ?? DBNull.Value;

			index++;
		}

<#	foreach( Query query in queries ) { #>
		public async Task<<#= query.CSResultTypeName #>> Execute<#= query.Name #>QueryAsync()
		{
			using( SqlCommand cmd = this.c.CreateCommand() )
			{
				cmd.CommandText =
@"
<#= query.QueryText #>
";
				
				using( SqlDataReader rdr = await cmd.ExecuteReaderAsync().ConfigureAwait(false) )
				{
					<#= query.CSResultTypeName #> allResults = new <#= query.CSResultTypeName #>();

<#		for( Int32 i = 0; i < query.Results.Count; i++ ) { String rowTypeName = query.CSResultTypeName + ".Result" + i + "Row"; #>
					allResults.Result<#= i #> = new List<<#= rowTypeName #>>();

					while( await rdr.ReadAsync().ConfigureAwait(false) )
					{
						<#= rowTypeName #> row = new <#= rowTypeName #>()
						{
<#			foreach( Column c in query.Results[i] ) { #>
<#				if( c.IsNullable ) { #>
							<#= c.Name #> = rdr.IsDBNull( <#= c.Ordinal #> ) ? (<#= c.CSType #>)null : rdr.Get<#= c.CSType.TrimEnd('?') #>( <#= c.Ordinal #> ),
<#				} else { #>
							<#= c.Name #> = rdr.Get<#= c.CSType #>( <#= c.Ordinal #> ),
<#				} #>
<#			} #>
						};
						allResults.Result<#= i #>.Add( row );
					}

					await rdr.NextResultAsync().ConfigureAwait(false);

<#		} #>
					return allResults;
				}
			}
		}

<#	} #>

	}

	#region Query result types

<#	foreach( Query query in queries ) { #>
	public class <#= query.CSResultTypeName #>
	{
<#		for( Int32 i = 0; i < query.Results.Count; i++ ) { #>
			
		public class Result<#= i #>Row
		{
<#			foreach( Column c in query.Results[i] ) { #>
			public <#= c.CSType #> <#= c.Name #> { get; set; }
<#			} #>
		}

		public List<Result<#= i #>Row> Result<#= i#> { get; set; }

<#		} #>
	}
<#	} #>

	#endregion

	#region Table entities

<#	foreach( Table table in tables.Where( t => !t.IsView ) ) { #>
<#		this.RenderEntityClass( table.CSName, true, table.Columns ); #>
<#	} #>

	#endregion

}
<#

con.Dispose();

#>
<#+

static string databaseClassName = null;

void RenderEntityClass( String name, Boolean includeMutable, List<Column> columns ) {
#>
	#region Entity: <#= name #>

	// Immutable entity.
	public class <#= name #>
	{
		// Constructor
		public <#= name #>
		(
<#+	foreach( Column c in columns ) { #>
			<#= c.CSType #> <#= c.LocalName #><#= c.IsLast ? "" : "," #>
<#+	} #>
		)
		{
<#+	foreach( Column c in columns ) { #>
			this.<#= c.NamePad #> = <#= c.LocalName #>;
<#+	} #>
		}

		// Properties
<#+	foreach( Column c in columns ) { #>
		public <#= c.CSType #> <#= c.Name #> { get; }<#= c.CSComment #>
<#+	} #>
	}

	// Mmutable delta entity.
	public class Mutable<#= name #>
	{
		// Constructor
		public Mutable<#= name #>()
		{
		}

		// Properties
<#+	foreach( Column c in columns ) { #>
		public <#= c.CSTypePad #> <#= c.Name #> { get; set; }<#= c.CSComment #>
		public <#= "Boolean".PadRight( c.LongestCSType ) #> <#= c.Name #>IsSet { get; set; }

<#+	} #>
	}

	public partial class <#= databaseClassName #>
	{
		public static <#= name #> Create<#= name #>Entity( SqlDataReader rdr )
		{
			return new <#= name #>
			(
<#+	foreach( Column c in columns ) { #>
				<#= c.LocalNamePad #>: <#= c.GetDataReaderMethodCall( "rdr" ) #><#= c.IsLast ? "" : "," #>
<#+	} #>
			);
		}
	}

	#endregion

<#+

}

List<Table> GetAllTables(SqlConnection con)
{
	List<Tuple<Table,Column>> allColumns = new List<Tuple<Table,Column>>();

	using( SqlCommand cmd = con.CreateCommand() )
	{
		cmd.CommandText = @"
SELECT
	c.TABLE_SCHEMA,
	c.TABLE_NAME,
	CASE t.TABLE_TYPE WHEN 'VIEW' THEN 1 ELSE 0 END AS IS_VIEW,
	c.ORDINAL_POSITION,
	c.COLUMN_NAME,
	c.DATA_TYPE,
	CASE c.IS_NULLABLE WHEN 'YES' THEN 1 ELSE 0 END AS IS_NULLABLE,
	COLUMNPROPERTY( OBJECT_ID( c.TABLE_SCHEMA + '.' + c.TABLE_NAME ), c.COLUMN_NAME, 'IsIdentity' ) AS IS_IDENTITY,
	CASE WHEN PKCount > 0 THEN 1 ELSE 0 END AS IS_PRIMARY_KEY,
	ISNULL( FKCount, 0 ) AS FOREIGN_KEY_COUNT
FROM
	INFORMATION_SCHEMA.COLUMNS AS c
	INNER JOIN INFORMATION_SCHEMA.TABLES AS t ON
		c.TABLE_SCHEMA = t.TABLE_SCHEMA AND
		c.TABLE_NAME = t.TABLE_NAME

	LEFT JOIN
	(
		SELECT
			u.TABLE_CATALOG,
			u.TABLE_SCHEMA,
			u.TABLE_NAME,
			u.COLUMN_NAME,
			COUNT( CASE WHEN [o].[type] = 'PK' THEN 1 END ) AS PKCount,
			COUNT( CASE WHEN [o].[type] = 'F'  THEN 1 END ) AS FKCount
		FROM
			INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS u
			LEFT JOIN sys.objects AS o ON o.[name] = u.CONSTRAINT_NAME
		GROUP BY
			u.TABLE_CATALOG,
			u.TABLE_SCHEMA,
			u.TABLE_NAME,
			u.COLUMN_NAME
	) AS meta ON
		meta.TABLE_CATALOG = t.TABLE_CATALOG AND
		meta.TABLE_SCHEMA = t.TABLE_SCHEMA AND
		meta.TABLE_NAME = t.TABLE_NAME AND
		meta.COLUMN_NAME = c.COLUMN_NAME

WHERE
	c.TABLE_NAME <> 'sysdiagrams'
ORDER BY
	TABLE_SCHEMA,
	TABLE_NAME,
	ORDINAL_POSITION";

		using( SqlDataReader rdr = cmd.ExecuteReader() )
		{
			while( rdr.Read() )
			{
				Table table = new Table()
				{
					Schema = rdr.GetString(0),
					Name = rdr.GetString(1),
					IsView = rdr.GetInt32(2) == 1
				};

				Column col = new Column()
				{
					Ordinal = rdr.GetInt32(3),
					Name = rdr.GetString(4),
					Type = rdr.GetString(5),
					IsNullable = rdr.GetInt32(6) == 1,
					IsIdentity = rdr.GetInt32(7) == 1,
					IsPrimaryKey = rdr.GetInt32(8) == 1,
					ForeignKeyCount = rdr.GetInt32(9)
				};

				allColumns.Add( Tuple.Create(table,col) );
			}
		}
	}

	List<Table> allTables = allColumns
		.GroupBy( tuple => new { tuple.Item1.Schema, tuple.Item1.Name, tuple.Item1.IsView } )
		.Select( grp => {
			List<Column> cols = grp.Select( t => t.Item2 ).ToList();
			Column.SetColumnsMetadata( cols );

			return new Table()
			{
				Schema  = grp.Key.Schema,
				Name    = grp.Key.Name,
				IsView  = grp.Key.IsView,
				Columns = cols
			};
		} )
		.ToList();

	return allTables;
}

List<Query> GetAllQueries(SqlConnection con, DirectoryInfo directory)
{
	List<Query> allQueries = directory
		.GetFiles("*.sql", SearchOption.AllDirectories )
		.Select( fi => new Query() {
			Name = Path.GetFileNameWithoutExtension( fi.Name ),
			QueryText = File.ReadAllText( fi.FullName )
		} )
		.Select( q => new Query()
		{ 
			Name = q.Name,
			QueryText = q.QueryText,
			Results = GetQueryResults( con, q.QueryText )
		} )
		.ToList();

	return allQueries;
}

List<List<Column>> GetQueryResults(SqlConnection con, String queryText)
{
	List<List<Column>> allResults = new List<List<Column>>();

	using( SqlCommand cmd = con.CreateCommand() )
	{
		cmd.CommandText = queryText;

		using( SqlDataReader rdr = cmd.ExecuteReader() )
		{
			do
			{
				List<Column> result = new List<Column>();

				DataTable schema = rdr.GetSchemaTable();
				foreach( DataRow cr in schema.Rows )
				{
					result.Add( new Column()
					{
						Ordinal = (Int32)cr["ColumnOrdinal"],
						Name = (String)cr["ColumnName"],
						Type = (String)cr["DataTypeName"],
						IsNullable = (Boolean)cr["AllowDBNull"],
						IsIdentity = (Boolean)cr["IsIdentity"]
					} );
				}

				allResults.Add( result );

				Column.SetColumnsMetadata( result );
			}
			while( rdr.NextResult() );
		}
	}

	return allResults;
}

class Table
{
	public String Schema;
	public String Name;
	public Boolean IsView;

	public List<Column> Columns;

	public String CSName
	{
		get
		{
			string validName = this.Name.All( c => Char.IsLetterOrDigit(c) ) ? this.Name : String.Concat( this.Name.Where( c => Char.IsLetterOrDigit(c) ) );

			if     ( validName.EndsWith("ies") ) validName = validName.Substring( 0, validName.Length - 3 ) + "y";
			else if( validName.EndsWith("s"  ) ) validName = validName.Substring( 0, validName.Length - 1 );

			return ( this.Schema == "dbo" ? "" : this.Schema ) + validName;
		}
	}
}

class Column
{
	public static void SetColumnsMetadata( List<Column> cols )
	{
		cols[ 0              ].IsFirst = true;
		cols[ cols.Count - 1 ].IsLast  = true;

		Int32 longestName   = cols.Max( c => c.Name  .Length );
		Int32 longestCSType = cols.Max( c => c.CSType.Length );

		foreach( Column c in cols )
		{
			c.LongestName   = longestName;
			c.LongestCSType = longestCSType;
		} 
	} 

	public Int32 Ordinal;
	public String Name;
	public String Type;
	public Boolean IsNullable;
	public Boolean IsIdentity;
	public Boolean IsPrimaryKey;
	public Int32 ForeignKeyCount;

	public Boolean IsFirst;
	public Boolean IsLast;
	public Int32 LongestName;
	public Int32 LongestCSType;

	public string NamePad
	{
		get
		{
			return this.Name.PadRight( this.LongestName );
		}
	}

	public string LocalName
	{
		get
		{
			return char.ToLower( this.Name[0] ) + this.Name.Substring(1);
		}
	}

	public string LocalNamePad
	{
		get
		{
			return this.LocalName.PadRight( this.LongestName );
		}
	}

	public string CSComment
	{
		get
		{
			if( !this.IsIdentity && !this.IsPrimaryKey && this.ForeignKeyCount == 0 ) return "";

			return " // " + string.Join( ", ", new string[]
			{
				( this.IsIdentity           ? "IDENTITY"                        : null ),
				( this.IsPrimaryKey         ? "PRIMARY KEY"                     : null ),
				( this.ForeignKeyCount != 0 ? ( this.ForeignKeyCount + " FKs" ) : null )
			}.Where( s => !string.IsNullOrWhiteSpace(s) ) );
		}
	}

	public String CSType
	{
		get
		{
			switch( this.Type.ToLowerInvariant() )
			{
			case "char":
			case "varchar":
			case "nchar":
			case "nvarchar":
			case "text":
			case "ntext":
				return "String";

			case "bit":
				return "Boolean" + ( this.IsNullable ? "?" : "" );
			case "tinyint":
				return "Byte" + ( this.IsNullable ? "?" : "" );
			case "int":
				return "Int32" + ( this.IsNullable ? "?" : "" );
			case "smallint":
				return "Int16" + ( this.IsNullable ? "?" : "" );
			case "bigint":
				return "Int64" + ( this.IsNullable ? "?" : "" );
			
			case "date":
			case "datetime":
			case "datetime2":
			case "datetimeoffset":
			case "smalldate":
				return "DateTime" + ( this.IsNullable ? "?" : "" );
			
			case "float":
			case "real":
				return "Double" + ( this.IsNullable ? "?" : "" );
			
			case "decimal":
			case "numeric":
			case "money":
			case "smallmoney":
				return "Decimal" + ( this.IsNullable ? "?" : "" );

			case "uniqueidentifier":
				return "Guid" + ( this.IsNullable ? "?" : "" );

			case "binary":
			case "varbinary":
			case "image":
				return "Byte[]";

			default:
				return "TODO" + ( this.IsNullable ? "?" : "" );
			}
		}
	}

	public string SqlDbType
	{
		get
		{
			System.Data.SqlDbType t = (System.Data.SqlDbType)Enum.Parse( typeof(System.Data.SqlDbType), this.Type, true );
			return t.ToString();
		}
	}

	public string CSTypePad
	{
		get
		{
			return this.CSType.PadRight( this.LongestCSType );
		}
	}

	public SqlDbType SqlType { get { return (SqlDbType)Enum.Parse( typeof(SqlDbType), this.Type, true ); } }

	public Boolean IsCSNullable { get { return this.IsNullable && this.CSType != "String" && this.CSType != "Byte[]"; } }

	public string GetDataReaderMethodCall(string rdrName)
	{
		// {0} - rdrName
		// {1} - column ordinal
		// {2} - cast
		// {3} - method name
		// {4} - trailing expression

		string format;
		string methodName   = "Get" + this.CSTypePad.Replace("?", "");
		string cast         = this.CSTypePad;
		string trailingExpr = "";

		if( this.IsNullable )
		{
			format = "{0}.IsDBNull( {1,2} ) ? ({2})null : {0}.{3}( {1,2} ){4}";
			
			if( methodName.Trim() == "GetByte[]" )
			{
				methodName = "GetSqlBinary";
				trailingExpr = ".Value";
			}
		}
		else
		{
			format = "{0}.{3}( {1} ){4}";
		}

		return string.Format( CultureInfo.InvariantCulture, format, /*0*/ rdrName, /*1*/ this.Ordinal, /*2*/ cast, /*3*/ methodName, /*4*/ trailingExpr );
	}
}

class Query
{
	public String Name;
	public String QueryText;

	//public Boolean IsSingleResultSet => this.Results.Count == 1;

	public String CSResultTypeName { get { return this.Name + "Result"; } }

	public List<List<Column>> Results;
}

#>